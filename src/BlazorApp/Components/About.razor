@inject LanguageService LanguageService

<section class="light about-section" id="about">
    @if (hero is not null)
    {
        <img class="about-background" src="@(hero.Src)" alt="@(hero.Alt)" />
    }
    <div class="about-content">
        <h2>@GetTranslatedText("About Myself")</h2>
        @if (aboutMe is null)
        {
            <p><em>Loading...</em></p>
            @if (loadError is not null)
            {
                <p class="error">Error: @loadError</p>
            }
        }
        else
        {
            <p class="about-description">@aboutMe.Description</p>
            <hr />
            <ul class="skills-list">
                @foreach (var skill in aboutMe.Skills)
                {
                    <li key="@skill">@skill</li>
                }
            </ul>
            <hr />
            <p class="about-quote">@aboutMe.DetailOrQuote</p>
        }
    </div>
</section>

@code {
    [Parameter, EditorRequired]
    public required HttpClient Http { get; set; }

    [Parameter, EditorRequired]
    public required HeroImageService HeroImageService { get; set; }

    private AboutMe? aboutMe;
    private HeroImage? hero;
    private string? loadError;

    private List<AboutMe>? allAboutMeData;

    protected override async Task OnInitializedAsync()
    {
        LanguageService.OnLanguageChanged += UpdateUI;
        await LoadAboutMeData();
        hero = await HeroImageService.GetHeroAsync(img => img.Name is "about");
    }

    private async Task LoadAboutMeData()
    {
        try
        {
            if (allAboutMeData == null)
            {
                allAboutMeData = await Http.GetFromJsonAsync<List<AboutMe>>("sample-data/aboutme.json");
                if (allAboutMeData == null || !allAboutMeData.Any())
                {
                    loadError = "No data found in aboutme.json";
                    aboutMe = null;
                    return;
                }
            }

            string langCode = LanguageService.CurrentLanguageCode;
            aboutMe = allAboutMeData.FirstOrDefault(x => x.LangCode == langCode) ?? allAboutMeData.FirstOrDefault(x => x.LangCode == "en");
            if (aboutMe == null)
            {
                loadError = $"No data found for language '{langCode}' or fallback 'en'";
            }
        }
        catch (Exception ex)
        {
            loadError = $"Failed to load aboutme data: {ex.Message}";
            aboutMe = null;
            Console.WriteLine(loadError);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private string GetTranslatedText(string key)
    {
        if (key == "About Myself" && aboutMe?.AboutMeText != null)
        {
            return aboutMe.AboutMeText;
        }

        return key;
    }

    private void UpdateUI()
    {
        _ = LoadAboutMeData();
    }

    public void Dispose()
    {
        LanguageService.OnLanguageChanged -= UpdateUI;
    }
}